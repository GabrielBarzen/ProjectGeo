import { c as create_ssr_component, a as createEventDispatcher, f as each, e as escape, v as validate_component, b as add_attribute, o as onDestroy } from "../../../chunks/hooks.js";
import "leaflet";
import "../../../chunks/AdminControls.svelte_svelte_type_style_lang.js";
/* empty css                  */
const ConfirmInput = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  return `<div class="h-2/12 w-full flex justify-center"><button class="pointer-events-auto p-1 btn-confirm mb-4" id="expand-button" data-svelte-h="svelte-1aww0v">Confirm</button> <button class="pointer-events-auto p-1 btn-abort mb-4" id="expand-button" data-svelte-h="svelte-1fpbks6">Abort</button> </div>`;
});
var Action$1 = /* @__PURE__ */ ((Action2) => {
  Action2[Action2["Create"] = 0] = "Create";
  Action2[Action2["Edit"] = 1] = "Edit";
  return Action2;
})(Action$1 || {});
const ChangeStateContextMenu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  return `<div class="h-2/12 w-full flex justify-center content-center flex-col">${each(Object.keys(Action$1).filter((item) => !Number(item) && item != "0"), (action) => {
    return `<div class="w-11/12 h-1/3 mb-2 self-center"><button class="btn-secondary">${escape(action.toString())}</button> </div>`;
  })} </div>`;
});
var Action = /* @__PURE__ */ ((Action2) => {
  Action2["ChangeName"] = "Change name";
  Action2["EditAreas"] = "Edit area(s)";
  Action2["Delete"] = "Delete";
  return Action2;
})(Action || {});
const EditContextMenu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  return `<div class="h-2/12 w-full flex justify-center content-center flex-col">${each(Object.keys(Action).filter((item) => !Number(item) && item != "0"), (action) => {
    return `<div class="w-11/12 h-1/3 mb-2 self-center"><button class="btn-secondary">${escape(Action[action].toString())}</button> </div>`;
  })} </div>`;
});
const spinner90 = "data:image/svg+xml,%3csvg%20width='24'%20height='24'%20viewBox='0%200%2024%2024'%20xmlns='http://www.w3.org/2000/svg'%3e%3cstyle%3e.spinner_P7sC{transform-origin:center;animation:spinner_svv2%20.75s%20infinite%20linear}@keyframes%20spinner_svv2{100%25{transform:rotate(360deg)}}%3c/style%3e%3cpath%20fill='white'%20d='M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z'%20class='spinner_P7sC'/%3e%3c/svg%3e";
const css = {
  code: ".resourceAreaListEnabled.svelte-1lmou3f{pointer-events:none;position:absolute;top:0px;left:33.333333%;z-index:10;display:flex;height:100%;width:66.666667%;flex-direction:row;align-items:flex-end;justify-content:center\n}.resourceAreaListDisabled.svelte-1lmou3f{pointer-events:none;position:absolute;top:0px;left:0px;z-index:10;display:flex;width:100%;height:100%;flex-direction:row;align-items:flex-end;justify-content:center\n}",
  map: null
};
const AdminControls = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const ssr = false;
  var EditMode = /* @__PURE__ */ ((EditMode2) => {
    EditMode2[EditMode2["None"] = 0] = "None";
    EditMode2[EditMode2["Edit"] = 1] = "Edit";
    EditMode2[EditMode2["CreateResourceArea"] = 2] = "CreateResourceArea";
    EditMode2[EditMode2["CreateGraph"] = 3] = "CreateGraph";
    return EditMode2;
  })(EditMode || {});
  var EditModeState = /* @__PURE__ */ ((EditModeState2) => {
    EditModeState2[EditModeState2["None"] = 0] = "None";
    EditModeState2[EditModeState2["Action"] = 1] = "Action";
    EditModeState2[EditModeState2["Confirm"] = 2] = "Confirm";
    EditModeState2[EditModeState2["Wait"] = 3] = "Wait";
    return EditModeState2;
  })(EditModeState || {});
  var currentEditMode = 0;
  var currentEditModeState = 0;
  let { map } = $$props;
  if ($$props.ssr === void 0 && $$bindings.ssr && ssr !== void 0)
    $$bindings.ssr(ssr);
  if ($$props.map === void 0 && $$bindings.map && map !== void 0)
    $$bindings.map(map);
  $$result.css.add(css);
  return `${`<button class="btn-expand" data-svelte-h="svelte-1e06q8i">+</button>`} <div id="controls" class="${[
    "svelte-1lmou3f",
    " resourceAreaListDisabled"
  ].join(" ").trim()}"> <div class="w-4/12"><div class="w-full flex content justify-between">${``} ${currentEditModeState == EditModeState.Action ? `${currentEditMode == EditMode.None ? `${validate_component(ChangeStateContextMenu, "ChangeStateContextMenu").$$render($$result, {}, {}, {})}` : `${currentEditMode == EditMode.Edit ? `${validate_component(EditContextMenu, "EditContextMenu").$$render($$result, {}, {}, {})}` : ``}`}` : `${currentEditModeState == EditModeState.None ? `${currentEditMode == EditMode.Edit ? `<div class="w-full" data-svelte-h="svelte-aehs63">Select Zone To Edit</div>` : ``}` : ``}`}</div> <div class="h-2/12 w-full"> ${currentEditMode == EditMode.None ? `<button class="pointer-events-auto p-1 btn-primary mb-4">${currentEditModeState == EditModeState.None ? `+` : `-`}</button>` : `${currentEditModeState == EditModeState.Confirm ? `${currentEditMode == EditMode.Edit || currentEditMode == EditMode.CreateResourceArea || currentEditMode == EditMode.CreateGraph ? `${validate_component(ConfirmInput, "ConfirmInput").$$render($$result, {}, {}, {})}` : ``}` : `${currentEditModeState == EditModeState.Action || currentEditMode == EditMode.Edit && currentEditModeState == EditModeState.None ? `<button class="pointer-events-auto p-1 btn-primary mb-4" data-svelte-h="svelte-id3d3m">Cancel</button>` : `${currentEditModeState == EditModeState.Wait ? `<button class="pointer-events-none p-1 btn-primary mb-4" data-svelte-h="svelte-17ow5vy"><img${add_attribute("src", spinner90, 0)} alt="spinning button waiting" class="text-white m-auto"></button>` : ``}`}`}`}</div></div> </div>`;
});
const Map$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { view = [56.04673, 12.69437] } = $$props;
  let { zoom = 14 } = $$props;
  createEventDispatcher();
  let map;
  let mapElement;
  onDestroy(() => {
    map?.remove();
    map = void 0;
  });
  if ($$props.view === void 0 && $$bindings.view && view !== void 0)
    $$bindings.view(view);
  if ($$props.zoom === void 0 && $$bindings.zoom && zoom !== void 0)
    $$bindings.zoom(zoom);
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    {
      if (map) {
        map.setView(view, zoom);
      }
    }
    $$rendered = `<div id="map-container" class="relative size-full">${validate_component(AdminControls, "AdminControls").$$render(
      $$result,
      { map },
      {
        map: ($$value) => {
          map = $$value;
          $$settled = false;
        }
      },
      {}
    )} <div id="map" class="absolute left-0 top-0 size-full z-0"${add_attribute("this", mapElement, 0)}></div></div>`;
  } while (!$$settled);
  return $$rendered;
});
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Map$1, "Map").$$render($$result, {}, {}, {})}`;
});
export {
  Page as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
